# -*- coding: utf-8 -*-
"""
ASTROFLORA BACKEND - PUNTO DE ENTRADA PRINCIPAL MEJORADO
LUIS: Aplicaci√≥n con ciclo de vida completo, middleware avanzado y monitoreo.
"""
import logging
import asyncio
import uuid
import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException, status
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

from src.config.settings import settings
from src.container import AppContainer
from src.api.dependencies import set_container
from src.api.routers import analysis, health
from src.models.analysis import APIResponse
from src.core.exceptions import (
    AstrofloraException, ServiceUnavailableException, 
    AnalysisNotFoundException, DriverIAException,
    ToolGatewayException, CircuitBreakerOpenException,
    CapacityExceededException
)

def setup_logging() -> None:
    """LUIS: Configura el sistema de logging mejorado."""
    logging.basicConfig(
        level=getattr(logging, settings.LOG_LEVEL.upper()),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    
    # Silencia logs ruidosos
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("boto3").setLevel(logging.WARNING)
    logging.getLogger("botocore").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)

# Rate Limiter
limiter = Limiter(key_func=get_remote_address)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """LUIS: Ciclo de vida mejorado de la aplicaci√≥n."""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info(f"üöÄ Iniciando {settings.PROJECT_NAME} v{settings.PROJECT_VERSION}")
    logger.info(f"Entorno: {settings.ENVIRONMENT}")
    
    try:
        # Inicializa el contenedor
        container = AppContainer(settings)
        set_container(container)
        app.state.container = container
        
        # Inicializa recursos
        await container.initialize_resources()
        
        logger.info("‚úÖ Astroflora Antares iniciado exitosamente")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Error iniciando aplicaci√≥n: {e}")
        raise
    finally:
        logger.info("üîÑ Apagando Astroflora Antares...")
        
        try:
            # Limpia recursos
            if hasattr(app.state, 'container'):
                await app.state.container.shutdown()
            logger.info("‚úÖ Astroflora Antares apagado exitosamente")
            
        except Exception as e:
            logger.error(f"‚ùå Error apagando aplicaci√≥n: {e}")

# Crea la aplicaci√≥n FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.PROJECT_VERSION,
    description="""
    üß¨ **Astroflora Antares Core** - Sistema Cognitivo para Investigaci√≥n Cient√≠fica Aut√≥noma
    
    Antares es el cerebro cognitivo de Astroflora que orquesta investigaci√≥n cient√≠fica de forma aut√≥noma.
    
    ## Caracter√≠sticas Principales
    
    - **Driver IA**: Cient√≠fico cognitivo que ejecuta Prompt Protocols
    - **Orquestador Inteligente**: Gestiona flujos de an√°lisis complejos
    - **Herramientas Bioinform√°ticas**: BLAST, AlphaFold, MAFFT, MUSCLE y m√°s
    - **Resiliencia**: Circuit Breakers y gesti√≥n de capacidad
    - **Observabilidad**: M√©tricas en tiempo real y auditor√≠a completa
    - **Rate Limiting**: Control de tasa por IP y endpoint
    - **Cost Tracking**: Seguimiento de costos de IA
    
    ## Tipos de An√°lisis Disponibles
    
    - **An√°lisis de Funci√≥n de Prote√≠na**: Determina la funci√≥n de prote√≠nas desconocidas
    - **Alineamiento de Secuencias**: Alineamiento m√∫ltiple y an√°lisis de conservaci√≥n
    - **Predicci√≥n de Estructura**: Predicci√≥n 3D con AlphaFold
    - **Dise√±o de F√°rmacos**: Docking molecular y an√°lisis de candidatos
    - **Optimizaci√≥n de Bioreactores**: Optimizaci√≥n de condiciones de cultivo
    """,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura rate limiter
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Configura CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === MIDDLEWARE AVANZADO ===

@app.middleware("http")
async def add_request_id(request: Request, call_next):
    """LUIS: Middleware para tracing de requests."""
    request_id = str(uuid.uuid4())
    request.state.request_id = request_id
    
    response = await call_next(request)
    response.headers["X-Request-ID"] = request_id
    return response

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """LUIS: Middleware mejorado para logging de requests."""
    logger = logging.getLogger(__name__)
    request_id = getattr(request.state, 'request_id', 'unknown')
    
    start_time = time.time()
    
    # Log request
    logger.info(
        f"[{request_id}] {request.method} {request.url.path} - "
        f"IP: {request.client.host if request.client else 'unknown'}"
    )
    
    # Procesa request
    try:
        response = await call_next(request)
        
        # Calcula tiempo de procesamiento
        process_time = time.time() - start_time
        
        # Log response
        logger.info(
            f"[{request_id}] {request.method} {request.url.path} - "
            f"Status: {response.status_code} - "
            f"Time: {process_time:.3f}s"
        )
        
        return response
        
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(
            f"[{request_id}] {request.method} {request.url.path} - "
            f"ERROR: {str(e)} - Time: {process_time:.3f}s"
        )
        raise

# === MANEJADORES DE EXCEPCIONES MEJORADOS ===

@app.exception_handler(AstrofloraException)
async def handle_astroflora_exceptions(request: Request, exc: AstrofloraException):
    """LUIS: Maneja excepciones espec√≠ficas de Astroflora con respuesta estructurada."""
    logger = logging.getLogger(__name__)
    request_id = getattr(request.state, 'request_id', None)
    logger.error(f"[{request_id}] Excepci√≥n Astroflora: {exc}")
    
    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR
    
    if isinstance(exc, ServiceUnavailableException):
        status_code = status.HTTP_503_SERVICE_UNAVAILABLE
    elif isinstance(exc, AnalysisNotFoundException):
        status_code = status.HTTP_404_NOT_FOUND
    elif isinstance(exc, DriverIAException):
        status_code = status.HTTP_422_UNPROCESSABLE_ENTITY
    elif isinstance(exc, ToolGatewayException):
        status_code = status.HTTP_502_BAD_GATEWAY
    elif isinstance(exc, CircuitBreakerOpenException):
        status_code = status.HTTP_503_SERVICE_UNAVAILABLE
    elif isinstance(exc, CapacityExceededException):
        status_code = status.HTTP_429_TOO_MANY_REQUESTS
    
    return JSONResponse(
        status_code=status_code,
        content=APIResponse(
            success=False,
            error=f"{exc.__class__.__name__}: {str(exc)}",
            request_id=request_id
        ).dict()
    )

@app.exception_handler(HTTPException)
async def handle_http_exceptions(request: Request, exc: HTTPException):
    """LUIS: Maneja excepciones HTTP est√°ndar."""
    request_id = getattr(request.state, 'request_id', None)
    
    return JSONResponse(
        status_code=exc.status_code,
        content=APIResponse(
            success=False,
            error=exc.detail,
            request_id=request_id
        ).dict()
    )

@app.exception_handler(Exception)
async def handle_general_exceptions(request: Request, exc: Exception):
    """LUIS: Maneja excepciones generales con logging."""
    logger = logging.getLogger(__name__)
    request_id = getattr(request.state, 'request_id', None)
    logger.error(f"[{request_id}] Excepci√≥n no manejada: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content=APIResponse(
            success=False,
            error="Error interno del servidor" if settings.is_production() else str(exc),
            request_id=request_id
        ).dict()
    )

# === REGISTRA RUTAS ===
app.include_router(
    analysis.router,
    prefix="/api/analysis",
    tags=["üß¨ An√°lisis Cient√≠fico"]
)

app.include_router(
    health.router,
    prefix="/api/health",
    tags=["üè• Salud del Sistema"]
)

# === ENDPOINTS PRINCIPALES ===

@app.get("/", tags=["üöÄ General"])
@limiter.limit(f"{settings.RATE_LIMIT_REQUESTS_PER_MINUTE}/minute")
async def root(request: Request):
    """LUIS: Endpoint ra√≠z con informaci√≥n del sistema."""
    request_id = getattr(request.state, 'request_id', None)
    
    return APIResponse(
        success=True,
        data={
            "message": "üß¨ Astroflora Antares Core - Sistema Cognitivo Activo",
            "version": settings.PROJECT_VERSION,
            "environment": settings.ENVIRONMENT,
            "docs": "/docs",
            "health": "/api/health",
            "metrics": "/api/health/metrics",
            "features": [
                "Rate Limited API",
                "Request Tracing",
                "Cost Tracking",
                "Advanced Monitoring"
            ]
        },
        request_id=request_id
    )

@app.get("/info", tags=["üöÄ General"])
async def info(request: Request):
    """LUIS: Informaci√≥n detallada del sistema."""
    request_id = getattr(request.state, 'request_id', None)
    
    return APIResponse(
        success=True,
        data={
            "project": settings.PROJECT_NAME,
            "version": settings.PROJECT_VERSION,
            "environment": settings.ENVIRONMENT,
            "description": "Sistema Cognitivo para Investigaci√≥n Cient√≠fica Aut√≥noma",
            "features": [
                "Driver IA con LLM",
                "Herramientas Bioinform√°ticas",
                "Orquestaci√≥n Inteligente",
                "Resiliencia y Circuit Breakers",
                "M√©tricas y Observabilidad",
                "Gesti√≥n de Capacidad",
                "Rate Limiting Inteligente",
                "Cost Tracking Avanzado",
                "Request Tracing"
            ],
            "endpoints": {
                "analysis": "/api/analysis",
                "health": "/api/health",
                "metrics": "/api/health/metrics"
            },
            "limits": {
                "requests_per_minute": settings.RATE_LIMIT_REQUESTS_PER_MINUTE,
                "analysis_per_minute": settings.RATE_LIMIT_ANALYSIS_PER_MINUTE,
                "max_concurrent_jobs": settings.MAX_CONCURRENT_JOBS
            }
        },
        request_id=request_id
    )

if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "src.main:app",
        host="0.0.0.0",
        port=8001,
        reload=True if settings.ENVIRONMENT == "dev" else False,
        log_level=settings.LOG_LEVEL.lower()
    )