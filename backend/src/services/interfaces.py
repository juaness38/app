# -*- coding: utf-8 -*-
"""
ASTROFLORA BACKEND - INTERFACES DE SERVICIOS
LUIS: Contratos de servicios. Fundamental para flexibilidad y testabilidad.
"""
from typing import Protocol, Any, Optional, Dict, List
from src.models.analysis import (
    AnalysisRequest, AnalysisContext, JobPayload, PromptProtocol, 
    ToolResult, EventStoreEntry
)
import uuid

class IMetricsService(Protocol):
    """LUIS: Contrato para el servicio de métricas."""
    def record_analysis_started(self) -> None: ...
    def record_analysis_completed(self, duration_ms: float) -> None: ...
    def record_analysis_failed(self) -> None: ...
    def record_job_queued(self) -> None: ...
    def record_external_call(self, service_name: str, duration_ms: float) -> None: ...
    def record_external_call_failure(self, service_name: str) -> None: ...
    def record_driver_ia_invocation(self, protocol_type: str) -> None: ...

class ICapacityManager(Protocol):
    """LUIS: Contrato para gestionar la capacidad del sistema."""
    async def can_process_request(self) -> bool: ...
    async def add_to_waitlist(self, context_id: str) -> int: ...
    async def get_next_from_waitlist(self) -> Optional[str]: ...
    async def record_job_started(self) -> None: ...
    async def record_job_finished(self) -> None: ...
    async def get_current_capacity(self) -> Dict[str, int]: ...

class ICircuitBreaker(Protocol):
    """LUIS: Contrato para el Circuit Breaker."""
    async def call(self, async_func: callable, *args, **kwargs) -> Any: ...
    async def is_open(self) -> bool: ...
    async def reset(self) -> None: ...

class ISQSDispatcher(Protocol):
    """LUIS: Contrato para el despachador de trabajos a SQS."""
    async def dispatch_analysis_job(self, payload: JobPayload) -> None: ...
    async def get_queue_status(self) -> Dict[str, Any]: ...

class IEventStore(Protocol):
    """LUIS: Contrato para el almacén de eventos."""
    async def store_event(self, event: EventStoreEntry) -> None: ...
    async def get_events(self, context_id: str) -> List[EventStoreEntry]: ...
    async def get_events_by_type(self, event_type: str) -> List[EventStoreEntry]: ...

class IContextManager(Protocol):
    """LUIS: Contrato para gestionar el contexto de análisis."""
    async def create_context(self, request: AnalysisRequest, user_id: str) -> AnalysisContext: ...
    async def get_context(self, context_id: str) -> Optional[AnalysisContext]: ...
    async def update_context(self, context: AnalysisContext) -> None: ...
    async def update_progress(self, context_id: str, progress: int, step: str) -> None: ...
    async def set_results(self, context_id: str, results: Dict[str, Any]) -> None: ...
    async def mark_failed(self, context_id: str, error_message: str) -> None: ...
    async def mark_completed(self, context_id: str) -> None: ...

class IToolGateway(Protocol):
    """LUIS: Contrato para el gateway de herramientas."""
    async def invoke_tool(self, tool_name: str, parameters: Dict[str, Any]) -> ToolResult: ...
    async def get_available_tools(self) -> List[str]: ...
    async def health_check_tool(self, tool_name: str) -> bool: ...

class IDriverIA(Protocol):
    """LUIS: Contrato para el Driver IA - el cerebro del sistema."""
    async def execute_protocol(self, protocol: PromptProtocol, context: AnalysisContext) -> None: ...
    async def generate_protocol(self, request: AnalysisRequest) -> PromptProtocol: ...
    async def analyze_results(self, context_id: str, results: Dict[str, Any]) -> Dict[str, Any]: ...

class IOrchestrator(Protocol):
    """LUIS: Contrato para el orquestador principal."""
    async def start_new_analysis(self, request: AnalysisRequest, user_id: str) -> AnalysisContext: ...
    async def process_analysis_from_queue(self, payload: JobPayload) -> None: ...
    async def get_analysis_status(self, context_id: str) -> Optional[AnalysisContext]: ...
    async def cancel_analysis(self, context_id: str) -> bool: ...

class IAnalysisWorker(Protocol):
    """LUIS: Contrato para el worker de análisis."""
    async def process_job(self, payload: JobPayload) -> None: ...
    async def health_check(self) -> bool: ...